{"version":3,"file":"static/js/821.5b27c1d7.chunk.js","mappings":"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","sources":["containers/treemap/index.js"],"sourcesContent":["import React, { PureComponent, useEffect, useState } from 'react';\r\nimport { Paper, Loader, Center, Button } from '@mantine/core';\r\nimport { Helmet } from 'react-helmet';\r\nimport { connect } from 'react-redux';\r\nimport { getEveryFeeder } from '../../apis/main';\r\nimport AnyChart from 'anychart-react';\r\nimport anychart from 'anychart';\r\nimport { withRouter } from 'react-router';\r\n\r\n\r\nclass Treemap extends PureComponent {\r\n  /**\r\n   * Constructor Function\r\n   */\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loading: true,\r\n      chart: anychart.treeMap([]),\r\n      fullScreenMode: false,\r\n    };\r\n    this.chartSettings();\r\n    this.chartLegend();\r\n    this.chartHeader();\r\n    this.chartLabels();\r\n    this.chartTooltip();\r\n  }\r\n\r\n  /**\r\n   * Fetch data from server\r\n   */\r\n  fetchData() {\r\n    let treeConfig = this.props.config.needs.chartAndtables;\r\n    treeConfig = treeConfig.find((item) => item.key === 'treemap');\r\n    getEveryFeeder(treeConfig.feeder_url).then(async (res) => {\r\n      let data = anychart.data.tree(res.data.data, 'as-table');\r\n      this.state.chart.data(data);\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ loading: false });\r\n    this.fetchData();\r\n    /**\r\n     * @type {array}\r\n     */\r\n    let treeConfig = this.props.config.needs.chartAndtables;\r\n    treeConfig = treeConfig.find((item) => item.key === 'treemap');\r\n    this.interval = setInterval(() => this.fetchData(), treeConfig.refresh_time * 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  /**\r\n   * Set normal settings to chart\r\n   * @returns {void}\r\n   */\r\n  chartSettings() {\r\n    this.state.chart\r\n      // setting the number of levels shown\r\n      .maxDepth(2)\r\n      .selectionMode('none');\r\n\r\n    // set credits\r\n    this.state.chart.credits().enabled(false);\r\n    this.state.chart.headersDisplayMode('always-show');\r\n    this.state.chart.normal().stroke('#333333', 2);\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Customize Chart legend\r\n   * @returns {void}\r\n   */\r\n  chartLegend() {\r\n    this.state.chart\r\n      .legend()\r\n      .enabled(false)\r\n      .padding([0, 0, 0, 20])\r\n      .position('right')\r\n      .align('top')\r\n      .itemsLayout('vertical');\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Customize Chart Headers\r\n   * @returns {void}\r\n   */\r\n  chartHeader() {\r\n    this.state.chart\r\n      .headers()\r\n      .background('#333333')\r\n      .fontColor('#fff')\r\n      .fontFamily('Iran-sans')\r\n      .padding(5)\r\n      .format(function () {\r\n        return this.getData('name');\r\n      });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Customize Chart Labels\r\n   * @returns {void}\r\n   */\r\n  chartLabels() {\r\n    this.state.chart\r\n      .labels()\r\n      .fontFamily('Iran-sans')\r\n      .useHtml(true)\r\n      .fontColor('#fff')\r\n      .fontSize(12)\r\n      .textOverflow('')\r\n      .format(function () {\r\n        if (this.oc.kg.Ai.treemap_pointBounds.width > 30) {\r\n          return `${this.getData('name')}<br/>${this.getData('displayValue')}`;\r\n        }\r\n        return ``;\r\n      });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Customize Chart Tooltip\r\n   * @returns {void}\r\n   */\r\n  chartTooltip() {\r\n    this.state.chart\r\n      .tooltip()\r\n      .fontFamily('Irans-sans')\r\n      .useHtml(true)\r\n      .titleFormat(function () {\r\n        return `<span>${this.getData('name')}</span>`;\r\n      })\r\n      .format(function () {\r\n        return `<table class=\"w-full font-persian treeamp-tooltip-table\">\r\n          <tbody>\r\n          <tr>\r\n              <td>${this.getData('displayValue') ? 'درصد تغییرات' : ''}</td>\r\n              <td class=\"text-left\" dir=\"ltr\">${\r\n                this.getData('displayValue') || ''\r\n              }</td>\r\n            </tr>\r\n            <tr>\r\n              <td>${this.getData('realName') ? 'نام واقعی' : ''}</td>\r\n              <td class=\"text-left\">${this.getData('realName') || ''}</td>\r\n            </tr>\r\n            <tr>\r\n            <td>${this.getData('endPrice') ? 'قیمت نهایی' : ''}</td>\r\n            <td class=\"text-left\">${this.getData('endPrice') || ''}</td>\r\n          </tr>\r\n            <tr>\r\n            <td>${this.getData('lastDeal') ? 'آخرین معامله' : ''}</td>\r\n            <td class=\"text-left\">${this.getData('lastDeal') || ''}</td>\r\n          </tr>\r\n          <tr>\r\n          <td>${this.getData('count') ? 'تعداد' : ''}</td>\r\n          <td class=\"text-left\">${this.getData('count') || ''}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>${this.getData('volume') ? 'حجم' : ''}</td>\r\n          <td class=\"text-left\">${this.getData('volume') || ''}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>${this.getData('value') ? 'ارزش' : ''}</td>\r\n          <td class=\"text-left\">${this.getData('value') || ''}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>${this.getData('time') ? 'زمان' : ''}</td>\r\n          <td class=\"text-left\">${this.getData('time') || ''}</td>\r\n        </tr>\r\n          </tbody>\r\n        </table>`;\r\n      });\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Enter Full screen mode chart\r\n   * @returns {void}\r\n   */\r\n  enterFullScreen = ()=> {\r\n    this.state.chart.fullScreen(true);\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <Helmet>\r\n          <title>نقشه بازار</title>\r\n        </Helmet>\r\n        {this.state.loading ? (\r\n          <Paper>\r\n            <Center style={{ height: '800px' }}>\r\n              <Loader variant='dots' color=\"blue\" />\r\n            </Center>\r\n          </Paper>\r\n        ) : (\r\n          <Paper >\r\n            <Button ml=\"sm\" mt=\"sm\" size='xs' color=\"blue\" onClick={this.enterFullScreen}>تمام صفحه</Button>\r\n            <AnyChart\r\n              contextMenu={false}\r\n              height={`${window.outerHeight}px`}\r\n              resizing_mode=\"Recalculate\"\r\n              instance={this.state.chart}\r\n              title=\"\"\r\n            />\r\n          </Paper>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  config: state.config,\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps)(Treemap));\r\n"],"names":["Treemap","enterFullScreen","state","chart","fullScreen","loading","anychart","fullScreenMode","chartSettings","chartLegend","chartHeader","chartLabels","chartTooltip","treeConfig","this","props","config","needs","chartAndtables","find","item","key","getEveryFeeder","feeder_url","then","res","data","setState","fetchData","interval","setInterval","refresh_time","clearInterval","maxDepth","selectionMode","credits","enabled","headersDisplayMode","normal","stroke","Promise","resolve","legend","padding","position","align","itemsLayout","headers","background","fontColor","fontFamily","format","getData","labels","useHtml","fontSize","textOverflow","oc","kg","Ai","treemap_pointBounds","width","tooltip","titleFormat","style","height","variant","color","ml","mt","size","onClick","contextMenu","window","outerHeight","resizing_mode","instance","title","PureComponent","withRouter","connect"],"sourceRoot":""}